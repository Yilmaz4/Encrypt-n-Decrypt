from sys import argv;__all__=['ToastNotifier'];from os import path;from time import sleep;from win32api import GetModuleHandle;from win32api import PostQuitMessage;CW_USEDEFAULT=-2147483648;IDI_APPLICATION=32512;IMAGE_ICON=1;LR_DEFAULTSIZE=64;LR_LOADFROMFILE=16;WM_DESTROY=2;WM_USER=1024;WS_OVERLAPPED=0;WS_SYSMENU=524288;from win32gui import CreateWindow;from win32gui import DestroyWindow;from win32gui import LoadIcon;from win32gui import LoadImage;from win32gui import NIF_ICON;from win32gui import NIF_INFO;from win32gui import NIF_MESSAGE;from win32gui import NIF_TIP;from win32gui import NIM_ADD;from win32gui import NIM_DELETE;from win32gui import NIM_MODIFY;from win32gui import RegisterClass;from win32gui import UnregisterClass;from win32gui import Shell_NotifyIcon;from win32gui import UpdateWindow;from win32gui import WNDCLASS;from psutil import process_iter
class ToastNotifier(object):
    def _show_toast(self, title, msg,icon_path, duration):
        message_map={WM_DESTROY:self.on_destroy,};self.wc=WNDCLASS();self.hinst=self.wc.hInstance=GetModuleHandle(None);self.wc.lpszClassName=str("PythonTaskbar");self.wc.lpfnWndProc=message_map
        try:self.classAtom=RegisterClass(self.wc)
        except:pass
        style = WS_OVERLAPPED | WS_SYSMENU;self.hwnd=CreateWindow(self.classAtom,"Taskbar",style,0,0,CW_USEDEFAULT,CW_USEDEFAULT,0,0,self.hinst,None);UpdateWindow(self.hwnd);icon_path=path.realpath(icon_path);icon_flags=LR_LOADFROMFILE|LR_DEFAULTSIZE;hicon=LoadImage(self.hinst,icon_path,IMAGE_ICON,0,0,icon_flags);flags=NIF_ICON|NIF_MESSAGE|NIF_TIP;nid=(self.hwnd,0,flags,WM_USER+20,hicon,"Encrypt'n'Decrypt");Shell_NotifyIcon(NIM_ADD,nid);Shell_NotifyIcon(NIM_MODIFY,(self.hwnd,0,NIF_INFO,WM_USER+20,hicon,"Balloon Tooltip",msg,200,title));sleep(duration);DestroyWindow(self.hwnd);UnregisterClass(self.wc.lpszClassName,None);return None
    def show_toast(self,title="",msg="",icon_path=None,duration=8.5):self._show_toast(title, msg, icon_path, duration)
    def on_destroy(self,hwnd,msg,wparam,lparam):nid = (self.hwnd,0);Shell_NotifyIcon(NIM_DELETE,nid);PostQuitMessage(0);return None
if "Encrypt.exe" in (p.name() for p in process_iter()):notification=ToastNotifier();notification.show_toast("Encrypt'n'Decrypt","RSA encryption has been completed.",duration=10,icon_path="Ico.ico")